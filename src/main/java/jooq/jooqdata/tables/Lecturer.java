/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import jooqdata.Keys;
import jooqdata.Public;
import jooqdata.tables.records.LecturerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lecturer extends TableImpl<LecturerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lecturer</code>
     */
    public static final Lecturer LECTURER = new Lecturer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LecturerRecord> getRecordType() {
        return LecturerRecord.class;
    }

    /**
     * The column <code>public.lecturer.id</code>.
     */
    public final TableField<LecturerRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lecturer.name</code>.
     */
    public final TableField<LecturerRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.lecturer.surname</code>.
     */
    public final TableField<LecturerRecord, String> SURNAME = createField(DSL.name("surname"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.lecturer.email</code>.
     */
    public final TableField<LecturerRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.lecturer.phone</code>.
     */
    public final TableField<LecturerRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    private Lecturer(Name alias, Table<LecturerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Lecturer(Name alias, Table<LecturerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lecturer</code> table reference
     */
    public Lecturer(String alias) {
        this(DSL.name(alias), LECTURER);
    }

    /**
     * Create an aliased <code>public.lecturer</code> table reference
     */
    public Lecturer(Name alias) {
        this(alias, LECTURER);
    }

    /**
     * Create a <code>public.lecturer</code> table reference
     */
    public Lecturer() {
        this(DSL.name("lecturer"), null);
    }

    public <O extends Record> Lecturer(Table<O> child, ForeignKey<O, LecturerRecord> key) {
        super(child, key, LECTURER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<LecturerRecord, Long> getIdentity() {
        return (Identity<LecturerRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LecturerRecord> getPrimaryKey() {
        return Keys.LECTURER_PKEY;
    }

    @Override
    public Lecturer as(String alias) {
        return new Lecturer(DSL.name(alias), this);
    }

    @Override
    public Lecturer as(Name alias) {
        return new Lecturer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lecturer rename(String name) {
        return new Lecturer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lecturer rename(Name name) {
        return new Lecturer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
