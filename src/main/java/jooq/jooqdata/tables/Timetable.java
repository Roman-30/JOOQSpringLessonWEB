/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import jooqdata.Keys;
import jooqdata.Public;
import jooqdata.tables.records.TimetableRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Timetable extends TableImpl<TimetableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.timetable</code>
     */
    public static final Timetable TIMETABLE = new Timetable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TimetableRecord> getRecordType() {
        return TimetableRecord.class;
    }

    /**
     * The column <code>public.timetable.id</code>.
     */
    public final TableField<TimetableRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.timetable.room_number</code>.
     */
    public final TableField<TimetableRecord, Integer> ROOM_NUMBER = createField(DSL.name("room_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.timetable.pare_number</code>.
     */
    public final TableField<TimetableRecord, Integer> PARE_NUMBER = createField(DSL.name("pare_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.timetable.lecture_id</code>.
     */
    public final TableField<TimetableRecord, Long> LECTURE_ID = createField(DSL.name("lecture_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.timetable.subject_id</code>.
     */
    public final TableField<TimetableRecord, Long> SUBJECT_ID = createField(DSL.name("subject_id"), SQLDataType.BIGINT, this, "");

    private Timetable(Name alias, Table<TimetableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Timetable(Name alias, Table<TimetableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.timetable</code> table reference
     */
    public Timetable(String alias) {
        this(DSL.name(alias), TIMETABLE);
    }

    /**
     * Create an aliased <code>public.timetable</code> table reference
     */
    public Timetable(Name alias) {
        this(alias, TIMETABLE);
    }

    /**
     * Create a <code>public.timetable</code> table reference
     */
    public Timetable() {
        this(DSL.name("timetable"), null);
    }

    public <O extends Record> Timetable(Table<O> child, ForeignKey<O, TimetableRecord> key) {
        super(child, key, TIMETABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TimetableRecord, Long> getIdentity() {
        return (Identity<TimetableRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TimetableRecord> getPrimaryKey() {
        return Keys.TIMETABLE_PKEY;
    }

    @Override
    public Timetable as(String alias) {
        return new Timetable(DSL.name(alias), this);
    }

    @Override
    public Timetable as(Name alias) {
        return new Timetable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Timetable rename(String name) {
        return new Timetable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Timetable rename(Name name) {
        return new Timetable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Integer, Integer, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
